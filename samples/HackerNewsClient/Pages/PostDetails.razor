@page "/post/{postId:int}"
@inject HackerNewsApi Api

<UseEndpoint Endpoint="@Api.GetItem" Arg="PostId" Context="query">
    @if (query.HasData)
    {
        var post = query.Data;
        <PageTitle>@post.Title</PageTitle>
        <h1>
            <a href="@post.Title" style="text-decoration: none">
                @post.Title
            </a>
        </h1>
        @if (!string.IsNullOrEmpty(post.Text))
        {
            <p>@((MarkupString)(post.Text))</p>
        }
        <p style="margin: 1em 0">
            <strong>
                <a href="@($"/user/{post.Author}")" style="color: hsl(0 80% 70%)">
                    @post.Author
                </a>
                | <DateDisplay Date="@post.CreatedAt" />
                | @post.TotalChildCount comments
            </strong>
        </p>

        <ul class="comment-list">
            @* Defer rendering of the comments, so that the title and body text loads faster, without waiting for comments at end. *@
            @* This has less scrolling artifacts than using Virtualize. *@
            <DeferList Items="post.ValidChildren.Select((comment,i) => (comment,i))" Context=comment ChunkSize="20">
                <Comment
                    Item=comment.comment
                    CommentColors="GetCommentColors(comment.comment, post.Author)"
                    CollapseCallback=thisCollapseCallback
                    Index="comment.i" />
            </DeferList>
        </ul>
    }
    else if (query.IsLoading)
    {
        <h1>Loading...</h1>
    }
    else if (query.IsError)
    {
        <strong>
            There was an error loading the selected post.
            <p>@query.Error.Message</p>
        </strong>
    }
</UseEndpoint>

@code {
    [Parameter]
    public int PostId { get; set; }

    private Comment.CommentCollapseCallback thisCollapseCallback = new();

    private IReadOnlyDictionary<string, int> GetCommentColors(HnItemDetails comment, string? postAuthor)
    {
        var colors = new Dictionary<string, int>();
        var stack = new Stack<string>();
        if (postAuthor is not null)
        {
            colors[postAuthor] = 0;
            stack.Push(postAuthor);
        }
        GetCommentColors(comment, stack, colors);
        return colors;
    }

    private void GetCommentColors(HnItemDetails comment, Stack<string> parents, Dictionary<string, int> colors)
    {
        var author = comment.Author;
        if (author is null)
        {
            foreach (var child in comment.Children)
            {
                GetCommentColors(child, parents, colors);
            }
            return;
        }
        if (!colors.ContainsKey(author) && parents.Contains(author))
        {
            colors[author] = colors.Count;
        }
        parents.Push(author);
        foreach (var child in comment.Children)
        {
            GetCommentColors(child, parents, colors);
        }
        parents.Pop();
    }
}
