@page "/search"
@inject HackerNewsApi Api

<PageTitle>Search | Hacker News</PageTitle>

<h1>Search</h1>

<div style="display: flex; gap: 32px">
    <label>Search
        <input type="search" placeholder="Search" @bind-value="_searchText"/>
    </label>
    <label>Time range
        <InputSelect TValue="TimeRange" @bind-Value="_timeRange">
            <option value="@TimeRange.Last7Days">Last 7 days</option>
            <option value="@TimeRange.Last24Hours">Last 24h</option>
            <option value="@TimeRange.All">All</option>
        </InputSelect>
    </label>
</div>

<UseEndpointInfinite
    Endpoint="Api.GetTopStories"
    Arg="@new(Page: 0, PageSize: 30, Query: _searchText, Tag: "story", StartDate: StartDate)"
    GetNextPageArg="(q, pageCount) => pageCount < q.Data?.NbPages ? q.Arg?.GetNextPageArgs() : null">
    <ul class="post-list">
        @foreach(var query in context.Pages)
        {
            @if (query.HasData)
            {
                var posts = query.Data;
                foreach (var post in posts.Hits)
                {
                    <li>
                        <PostPreview @key="post.Id" Post="post" />
                    </li>
                }
            }
            else if (query.IsLoading)
            {
                <strong style="margin-bottom: 200px" >Loading...</strong>
            }
            else
            {
                <strong>
                    Something went wrong!
                    @query.Error?.Message
                    <button @onclick="query.Refetch">Retry</button>
                </strong>
            }
        }
    </ul>
    @if (context.HasNextPage)
    {
        <div style="display: flex; justify-content: center; margin: 2em">
            <button @onclick="context.LoadNextPage">Load More</button>
        </div>
    }
</UseEndpointInfinite>

@code {
    enum TimeRange
    {
        All,
        Last7Days,
        Last24Hours,
    }

    string _searchText = "";
    TimeRange _timeRange = TimeRange.All;

    readonly DateTimeOffset now = DateTimeOffset.Now;

    private DateTimeOffset? StartDate => _timeRange switch
    {
        TimeRange.Last7Days => now.AddDays(-7),
        TimeRange.Last24Hours => now.AddDays(-1),
        TimeRange.All or _ => null,
    };
}