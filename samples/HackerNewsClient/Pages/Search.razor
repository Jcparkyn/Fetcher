@page "/search"
@inject HackerNewsApi Api

<PageTitle>Hacker News Demo</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>Search</MudText>

<div style="display: flex; gap: 16px">
    <MudTextField @bind-Value=SearchText
                  Label="Search"
                  Clearable
                  Variant="Variant.Outlined"
                  DebounceInterval="500"
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Filled.Search"
                  AdornmentColor="Color.Secondary" />
    <MudSelect T="DateTimeOffset?" @bind-Value="StartDate" Variant="Variant.Outlined" Label="Time range" Placeholder="All">
        <MudSelectItem T="DateTimeOffset?" Value="null"><div>All</div></MudSelectItem>
        <MudSelectItem T="DateTimeOffset?" Value="now.AddHours(-24)"><div>Last 24h</div></MudSelectItem>
        <MudSelectItem T="DateTimeOffset?" Value="now.AddDays(-7)"><div>Last 7 days</div></MudSelectItem>
    </MudSelect>
</div>

<MudList>
    @for (int _page = 0; _page < pageCount; _page++)
    {
        var page = _page;
        <UseEndpoint Endpoint="Api.GetTopStories"
                 Arg="@new(page, PageSize: 30, Query: SearchText, Tag: "story", StartDate: StartDate)"
                 Context="query">
            @if (query.HasData)
            {
                var posts = query.Data;
                foreach (var post in posts.Hits)
                {
                    <MudListItem Style="padding-inline: 0">
                        <PostPreview @key="post.Id" Post="post" />
                    </MudListItem>
                }
                if (page == pageCount - 1 && page < posts.NbPages - 1)
                {
                    <div style="display: flex; justify-content: center">
                        <MudButton OnClick="() => pageCount++">Load More</MudButton>
                    </div>
                }
            }
            else if (query.IsLoading)
            {
                <MudProgressLinear Indeterminate Style="margin-bottom: 200px" />
            }
            else
            {
                <MudAlert Severity="Severity.Error">
                    Something went wrong!
                    @query.Error?.Message
                    <MudButton OnClick="query.Refetch">Retry</MudButton>
                </MudAlert>
            }
        </UseEndpoint>
    }
</MudList>

@code {
    int pageCount = 1;
    string _searchText = "";
    string SearchText
    {
        get => _searchText;
        set
        {
            _searchText = value;
            pageCount = 1;
        }
    }
    DateTimeOffset? _startDate = null;
    DateTimeOffset? StartDate
    {
        get => _startDate;
        set
        {
            _startDate = value;
            pageCount = 1;
        }
    }
    DateTimeOffset now = DateTimeOffset.Now;
}