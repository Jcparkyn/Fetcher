@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<button @onclick=@forecastsQuery.Refetch>Refresh</button>

@if (forecastsQuery.IsLoading)
{
	<p><em>Loading...</em></p>
}
else if (forecastsQuery.IsError)
{
	<p><em>Error: @forecastsQuery.Error.Message</em></p>
}
else if (forecastsQuery.IsSuccess)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecastsQuery.Data)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
	private Query<WeatherForecast[]> forecastsQuery = null!;

    protected override void OnInitialized()
    {
        forecastsQuery = new Query<WeatherForecast[]>(
			StateHasChanged,
			() => Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json")!
		);
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
