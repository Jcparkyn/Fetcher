@page "/counter2"
@inject IsEvenApi Api

@{
    isEvenQuery.SetParams(currentCount);
}

<Observer Target=isEvenQuery OnChanged=@StateHasChanged />

<PageTitle>Counter</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>
<MudText Class="mb-4">Current count: @currentCount</MudText>

<MudText Class="mb-4">
    This number is: @if (isEvenQuery.IsLoading)
    {
        <MudProgressLinear Indeterminate />
    }
    else if (isEvenQuery.IsError)
    {
        <MudAlert Severity="Severity.Error">@isEvenQuery.Error.Message</MudAlert>
    }
    else if (isEvenQuery.HasData)
    {
        <span style="@(isEvenQuery.IsFetching ? "opacity: 0.7" : "")">
            @(isEvenQuery.Data ? "even" : "odd")
        </span>
    }
</MudText>

<MudButtonGroup>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="DecrementCount">-</MudButton>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="IncrementCount">+</MudButton>
</MudButtonGroup>

<MudButton @onclick="() => Api.IsEven.Invalidate(3)">Invalidate 3</MudButton>
<MudButton @onclick="Api.IsEven.InvalidateAll">Invalidate All</MudButton>

@code {
    private int currentCount = 0;
    private QueryObserver<int, bool> isEvenQuery = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        isEvenQuery = Api.IsEven.Use(new()
        {
            StaleTime = TimeSpan.FromSeconds(5),
        });
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    private void DecrementCount()
    {
        currentCount--;
    }
}
