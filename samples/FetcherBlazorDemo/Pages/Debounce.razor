@page "/debounce"
@inject HttpClient Http
@using FetcherBlazorDemo.Shared

@{
	query.SetParams(_searchString);
}

<PageTitle>Debouncing</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Debouncing</MudText>
<MudText Class="mb-8">
	This component demonstrates throttling the rate of queries using the <b>multipleQueryHandling</b> option.
</MudText>

<MudTextField @bind-Value="_searchString"
			  Immediate
			  Adornment="Adornment.Start"
			  AdornmentIcon="@Icons.Filled.Search"
			  AdornmentColor="Color.Secondary" />

<MudButton @onclick="query.Refetch" Style="float: right">Refresh</MudButton>
<MudDivider />
@if (query.IsError)
{
	<MudAlert Severity="Severity.Error">@query.Error.Message</MudAlert>
}
else
{
	<MudTable Items="query.Data?.Artists ?? new()"
		  Hover="true"
		  Dense
		  Elevation="0"
		  Loading="query.IsFetching">
		<HeaderContent>
			<MudTh>Name</MudTh>
			<MudTh>Country</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Name">@context.Name</MudTd>
			<MudTd DataLabel="Country">@context.Area?.Name</MudTd>
		</RowTemplate>
	</MudTable>
}

@code {
	private Query<string, ApiResponse?> query = null!;
	private string _searchString = string.Empty;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		query = new(
			onStateChanged: StateHasChanged,
			queryFn: Search,
			multipleQueryHandling: MultipleQueryHandling.QueueNewest
		);
	}

	private async Task<ApiResponse?> Search(string searchString, CancellationToken _)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return new ApiResponse(new());

		return await Http.GetFromJsonAsync<ApiResponse>($"https://musicbrainz.org/ws/2/artist?query={searchString}&fmt=json&limit=10");
	}

	public record ApiResponse(List<Artist> Artists);

	public record Artist(
		string? Name,
		Area? Area
	);

	public record Area(string? Name, string? Type);
}
