@page "/mutations"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Counter</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>
<MudText Class="mb-4">Current count: @currentCount</MudText>

<div style="margin-bottom: 12px">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="() => currentCount++">Increment</MudButton>
    <MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="() => mutation.Trigger(currentCount)">
        Save to local storage
    </MudButton>
</div>

<ObserveQuery Target="mutation">
    @if (mutation.IsLoading)
    {
        <MudProgressLinear Indeterminate />
    }
    else if (mutation.IsError)
    {
        <MudAlert Severity="Severity.Error">
            @mutation.Error.Message
        </MudAlert>
    }
    else if (mutation.IsSuccess)
    {
        <MudAlert Severity="Severity.Success">
            Saved count = @mutation.Arg to local storage
        </MudAlert>
    }
</ObserveQuery>

@code {
    private int currentCount = 0;
    private Mutation<int> mutation = null!;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        mutation = new MutationEndpoint<int>(
            async (val, _) =>
            {
                await Task.Delay(Random.Shared.Next(1000)); // Artificial delay
                await LocalStorage.SetItemAsync("counterVal", val);
            }
        ).Use();
        currentCount = await LocalStorage.GetItemAsync<int>("counterVal");
    }
}
