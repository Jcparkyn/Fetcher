@using FluentAssertions.Execution;
@using System.Collections.Specialized;
@inherits TestContext

@code {
    [Fact]
    public void Should_render_loading_states()
    {
        var qf = new MockQueryFunction<int, string>(1);
        var endpoint = new Endpoint<int, string>(qf.Query);

        var cut = Render<TestWrapper>(
            @<TestWrapper>
                <UseEndpoint Endpoint="endpoint" Arg="1" Context="query">
                    @(query.IsLoading ? "Loading" : @query.Data)
                </UseEndpoint>
            </TestWrapper>
        );
        var component = cut.FindComponent<UseEndpoint<int, string>>();

        using (new AssertionScope())
        {
            cut.MarkupMatches("Loading");
            component.RenderCount.Should().Be(1);
            cut.Instance.RenderCount.Should().Be(1);
        }
        using (new AssertionScope())
        {
            cut.InvokeAsync(() => qf.Sources[0].SetResult("1"));
            cut.MarkupMatches("1");
            component.RenderCount.Should().Be(2);
            cut.Instance.RenderCount.Should().Be(1);
            qf.Calls.Should().Equal(1);
        }
    }

    [Fact]
    public void Should_not_fetch_if_no_Arg_supplied()
    {
        var qf = new MockQueryFunction<int, string>(1);
        var endpoint = new Endpoint<int, string>(qf.Query);

        var cut = Render(
            @<UseEndpoint Endpoint="endpoint" Context="query">
                IsUninitialized: @query.IsUninitialized
            </UseEndpoint>
        );
        var component = cut.FindComponent<UseEndpoint<int, string>>();
        cut.MarkupMatches("IsUninitialized: True");
        qf.Calls.Should().BeEmpty();
    }

    [Fact]
    public void Should_not_fetch_if_AutoFetch_is_false()
    {
        var qf = new MockQueryFunction<int, string>(1);
        var endpoint = new Endpoint<int, string>(qf.Query);

        using var cut = Render(
            @<UseEndpoint Endpoint="endpoint" Arg="0" AutoFetch="false" Context="query">
                @query.IsUninitialized, @query.IsLoading, @(query.Data ?? "null")
             </UseEndpoint>
        );
        var component = cut.FindComponent<UseEndpoint<int, string>>();
        cut.MarkupMatches("True, False, null");
        qf.Calls.Should().BeEmpty();
    }

    [Theory]
    [InlineData(true)]
    [InlineData(false)]
    public void Should_fetch_when_AutoFetch_changes(bool reverseParamOrder)
    {
        var qf = new MockQueryFunction<int, string>(1);
        var endpoint = new Endpoint<int, string>(qf.Query);

        using var cut = Render(
            @<UseEndpoint Endpoint="endpoint" AutoFetch="false" Arg="0" Context="query">
                 @query.IsUninitialized, @query.IsLoading, @(query.Data ?? "null")
            </UseEndpoint>
    );
        var component = cut.FindComponent<UseEndpoint<int, string>>();
        cut.MarkupMatches("True, False, null");
        qf.Calls.Should().BeEmpty();
        component.RenderCount.Should().Be(1);

        // Test that it fetches once AutoFetch is true.
        // If we're not careful, the order of the parameters affects the result, which we don't want.
        // This order we use here technically should not have a deterministic effect on the resulting order
        // that the setters get called, but at the time of writing, it does.
        component.SetParametersAndRender(
            reverseParamOrder
                ? new ComponentParameter[] { ("AutoFetch", true), ("Arg", 1) }
                : new ComponentParameter[] { ("Arg", 1), ("AutoFetch", true) }
        );

        using (new AssertionScope())
        {
            qf.Calls.Should().Equal(1);
            cut.MarkupMatches("False, True, null");
            component.RenderCount.Should().Be(2);

            // Also test when AutoFetch is changed back to false
            component.SetParametersAndRender(
                reverseParamOrder
                    ? new ComponentParameter[] { ("AutoFetch", false), ("Arg", 1) }
                    : new ComponentParameter[] { ("Arg", 1), ("AutoFetch", false) }
            );
            qf.Calls.Should().Equal(1);
            // TODO: It might make more sense to revert to an "uninitialized" state here?
            // Or maybe AutoFetch should be handled directly in Query<>?
            cut.MarkupMatches("False, True, null");
        }
    }

    private void Should_fetch_when_Arg_changes()
    {
        //TODO
    }
}