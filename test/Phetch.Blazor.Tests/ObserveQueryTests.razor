@using FluentAssertions.Execution;
@inherits TestContext

@code {
    static TimeSpan timeout = TimeSpan.FromSeconds(0.5);

    [Fact]
    public void Should_render_with_no_callbacks()
    {
        var query = new Endpoint<int, string>(x => Task.FromResult(x.ToString()))
            .Use();

        var cut = Render(@<ObserveQuery Target="query" />);

        cut.MarkupMatches("");
    }

    [Fact]
    public void Should_call_correct_callbacks()
    {
        var qf = new MockQueryFunction<int, string>(1);
        var query = new Endpoint<int, string>(qf.Query)
            .Use();

        var (onChanged, onChangedCalls) = MakeMonitoredAction();
        var (onSuccess, onSuccessCalls) = MakeMonitoredAction<QuerySuccessEventArgs<int, string>>();

        var cut = Render(@<ObserveQuery Target="query" OnChanged="onChanged" OnSuccess="onSuccess" />);

        onChangedCalls.Should().HaveCount(0);

        cut.MarkupMatches("");

        cut.InvokeAsync(() => query.SetArg(1));

        onChangedCalls.Should().HaveCount(1);
        onSuccessCalls.Should().HaveCount(0);
        cut.RenderCount.Should().Be(2);

        cut.InvokeAsync(() => qf.Sources[0].SetResult("1"));
        using (new AssertionScope())
        {
            cut.WaitForAssertion(() => onChangedCalls.Should().HaveCount(2), timeout);
            cut.WaitForAssertion(() => onSuccessCalls.Should().HaveCount(1), timeout);

            onSuccessCalls.Should().SatisfyRespectively(
                e =>
                {
                    e.Result.Should().Be("1");
                    e.Arg.Should().Be(1);
                }
            );
            cut.RenderCount.Should().Be(3);
            cut.FindComponent<ObserveQuery<int, string>>().RenderCount.Should().Be(1);
        }
    }

    [Fact]
    public void Should_render_child_content()
    {
        var qf = new MockQueryFunction<int, string>(1);
        var query = new Endpoint<int, string>(qf.Query)
            .Use();

        var cut = Render(
            @<ObserveQuery Target="query">
                @(query.IsLoading ? "Loading" : @query.Data)
            </ObserveQuery>
        );

        var component = cut.FindComponent<ObserveQuery<int, string>>();

        cut.MarkupMatches("");
        component.RenderCount.Should().Be(1);
        cut.RenderCount.Should().Be(1);

        cut.InvokeAsync(() => query.SetArg(1));

        using (new AssertionScope())
        {
            cut.WaitForAssertion(() => cut.MarkupMatches("Loading"), timeout);
            component.RenderCount.Should().Be(2);
        }
        cut.InvokeAsync(() => qf.Sources[0].SetResult("1"));

        using (new AssertionScope())
        {
            cut.WaitForAssertion(() => cut.MarkupMatches("1"), timeout);
            component.RenderCount.Should().Be(3);
        }
    }
}
